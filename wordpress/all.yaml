apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  labels:
    app: mysql
data:
  MYSQL_DATABASE: wordpress
  MYSQL_USER: wpuser
  MYSQL_INNODB_BUFFER_POOL_SIZE: 128M
  MYSQL_MAX_CONNECTIONS: '200'

---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  labels:
    app: mysql
stringData:
  MYSQL_ROOT_PASSWORD: StrongRootPassword123!
  MYSQL_PASSWORD: SecureWPPassword456!
type: Opaque

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  serviceName: mysql-headless
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          envFrom:
            - configMapRef:
                name: mysql-config
            - secretRef:
                name: mysql-secret
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-data
              mountPath: /var/lib/mysql
            - name: mysql-config-volume
              mountPath: /etc/mysql/conf.d
          resources:
            requests:
              memory: 512Mi
              cpu: 250m
            limits:
              memory: 1Gi
              cpu: 500m
          livenessProbe:
            exec:
              command:
                - mysqladmin
                - ping
                - -h
                - localhost
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: mysql-config-volume
          configMap:
            name: mysql-config
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi
        storageClassName: hostpath

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-headless
  labels:
    app: mysql
spec:
  clusterIP: None
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  type: ClusterIP
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: wordpress-config
  labels:
    app: wordpress
data:
  WORDPRESS_DB_HOST: mysql:3306
  WORDPRESS_DB_NAME: wordpress
  WORDPRESS_DB_USER: wpuser
  WORDPRESS_CONFIG_EXTRA: |
    define('WP_MEMORY_LIMIT', '256M');
    define('WP_MAX_MEMORY_LIMIT', '512M');
    define('AUTOMATIC_UPDATER_DISABLED', true);
    define('WP_AUTO_UPDATE_CORE', false);

---
apiVersion: v1
kind: Secret
metadata:
  name: wordpress-secret
  labels:
    app: wordpress
stringData:
  WORDPRESS_DB_PASSWORD: SecureWPPassword456!
  WORDPRESS_AUTH_KEY: your-auth-key-here
  WORDPRESS_SECURE_AUTH_KEY: your-secure-auth-key-here
  WORDPRESS_LOGGED_IN_KEY: your-logged-in-key-here
  WORDPRESS_NONCE_KEY: your-nonce-key-here
type: Opaque

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-pvc
  labels:
    app: wordpress
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: hostpath

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:6.3-php8.1-apache
          envFrom:
            - configMapRef:
                name: wordpress-config
            - secretRef:
                name: wordpress-secret
          ports:
            - containerPort: 80
              name: http
          volumeMounts:
            - name: wordpress-data
              mountPath: /var/www/html
          resources:
            requests:
              memory: 256Mi
              cpu: 250m
            limits:
              memory: 512Mi
              cpu: 500m
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 2
          securityContext:
            runAsUser: 33
      volumes:
        - name: wordpress-data
          persistentVolumeClaim:
            claimName: wordpress-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: wordpress
  labels:
    app: wordpress
spec:
  type: ClusterIP
  selector:
    app: wordpress
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  sessionAffinity: ClientIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress-ingress-local
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 50m
    nginx.ingress.kubernetes.io/proxy-read-timeout: '300'
    nginx.ingress.kubernetes.io/proxy-connect-timeout: '300'
    nginx.ingress.kubernetes.io/ssl-redirect: 'false'
spec:
  rules:
    - host: wordpress.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: wordpress
                port:
                  number: 80
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: wordpress
                port:
                  number: 80

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-pvc
  labels:
    app: backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: hostpath

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: mysql-backup
  labels:
    app: mysql-backup
spec:
  schedule: '0 2 * * *'
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: mysql-backup
        spec:
          containers:
            - name: mysql-backup
              image: mysql:8.0
              env:
                - name: MYSQL_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mysql-secret
                      key: MYSQL_ROOT_PASSWORD
              command:
                - /bin/bash
                - -c
                - |
                  set -e
                  BACKUP_FILE="/backup/mysql-backup-$(date +%Y%m%d-%H%M%S).sql"
                  echo "Starting MySQL backup to $BACKUP_FILE"

                  mysqldump -h mysql -u root -p$MYSQL_ROOT_PASSWORD \
                    --single-transaction \
                    --routines \
                    --triggers \
                    --all-databases > $BACKUP_FILE

                  echo "Backup completed successfully"
                  gzip $BACKUP_FILE
                  echo "Backup compressed"

                  # Keep only last 7 days of backups
                  find /backup -name "mysql-backup-*.sql.gz" -mtime +7 -delete
                  echo "Old backups cleaned up"

                  # List current backups
                  ls -la /backup/
              volumeMounts:
                - name: backup-storage
                  mountPath: /backup
              resources:
                requests:
                  memory: 256Mi
                  cpu: 250m
                limits:
                  memory: 512Mi
                  cpu: 500m
          volumes:
            - name: backup-storage
              persistentVolumeClaim:
                claimName: backup-pvc
          restartPolicy: OnFailure

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: wordpress-backup
  labels:
    app: wordpress-backup
spec:
  schedule: '0 3 * * *'
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: wordpress-backup
        spec:
          containers:
            - name: wordpress-backup
              image: alpine:latest
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  apk add --no-cache tar gzip

                  BACKUP_FILE="/backup/wordpress-files-$(date +%Y%m%d-%H%M%S).tar.gz"
                  echo "Starting WordPress files backup to $BACKUP_FILE"

                  tar -czf $BACKUP_FILE -C /var/www/html \
                    --exclude='wp-content/cache/*' \
                    --exclude='wp-content/tmp/*' \
                    .

                  echo "WordPress files backup completed"

                  # Keep only last 7 days of backups
                  find /backup -name "wordpress-files-*.tar.gz" -mtime +7 -delete
                  echo "Old file backups cleaned up"

                  ls -la /backup/
              volumeMounts:
                - name: wordpress-data
                  mountPath: /var/www/html
                  readOnly: true
                - name: backup-storage
                  mountPath: /backup
              resources:
                requests:
                  memory: 128Mi
                  cpu: 100m
                limits:
                  memory: 256Mi
                  cpu: 200m
          volumes:
            - name: wordpress-data
              persistentVolumeClaim:
                claimName: wordpress-pvc
            - name: backup-storage
              persistentVolumeClaim:
                claimName: backup-pvc
          restartPolicy: OnFailure
